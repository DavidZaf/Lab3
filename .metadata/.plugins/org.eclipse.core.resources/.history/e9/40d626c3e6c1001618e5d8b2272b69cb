-- @path SML=/at.ac.tuwien.big.statesml.transformations/metamodels/statesml.ecore
-- @nsURI PN=http://org.pnml.tools/epnk/pnmlcoremodel


module SML2PN;
create OUT: PN from IN: SML;

helper def: SD_TransitionName: String =
	'AddTran4SD_';

helper def: SD_ArcName: String =
	'AddArc4SD_';

helper def: SC_TransitionName: String =
	'AddTran4SC_';

helper def: SC_ArcName: String =
	'AddArc4SC_';


helper context String def : returnTranSDName() : String =  thisModule.SD_TransitionName;
	
helper context String def : returnTranSCName() : String =  thisModule.SC_TransitionName;	

helper context String def : returnArcSDName() : String =  thisModule.SD_ArcName;

helper context String def : returnArcScName() : String =  thisModule.SC_ArcName;

helper context String def : returnToLowerCase() : String = self.toLower();
	
rule StateSys2PN {
	from
		i1: SML!StateSystem
	to
		o0: PN!PetriNetDoc (
			net <- o1
		),
		o1: PN!PetriNet (
			id <- 'PN1',
			name <- o2,
			page <- pPage
		),
		o2: PN!Name (
			text <- i1.name
		),
		pPage: PN!Page (
			id <- 'P1',
			name <- pPageName,
			object <- i1.nodes,
			object <- i1.edges,
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionDivergence))->collect(x | thisModule.resolveTemp(x,'additionalArc')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionDivergence))->collect(x | thisModule.resolveTemp(x,'additionalTransition')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionConvergence))->collect(x | thisModule.resolveTemp(x,'additionalArc')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionConvergence))->collect(x | thisModule.resolveTemp(x,'additionalTransition'))
		),
		pPageName: PN!Name (
			text <- 'MainPage'
		)
}


--abstract rule Node2Node{
	
--	from SMLNode : SML!Node
	
--	to pNode : PN!Node(
	
--		name <- pNodeName
--	),

--	pNodeName: PN!Name(
		
--		text <- SMLNode.name
--	)

--}



rule State2Place {
	from
		state: SML!State
	to
		place: PN!Place (
			name <- pStateName,
			id <- state.name.returnToLowerCase()
		),
		pStateName: PN!Name (
			text <- state.name
		)
}

rule Edge2Arc {
	from
		edge: SML!Edge
	to
		arc: PN!Arc (
			id <- edge.name,
			source <- edge.source, 
			target <- edge.target
		),
		pArcName: PN!Name (
			text <- edge.name
		)
}

rule SelectionDivergence2Place {
	from
		SD: SML!SelectionDivergence
	to
		placeSD: PN!Place (
			name <- pSDName,
			id <- SD.name.returnToLowerCase(),
			
			"in" <- additionalArc
			
		),
		pSDName: PN!Name (
			text <- SD.name
		),
		
		additionalTransition : PN!Transition(
			
			id <- thisModule.SD_TransitionName.returnTranSDName() + pSDName.text,
			"in" <- SD.incomingEdges
		),

		additionalArc : PN!Arc(

			id <- thisModule.SD_ArcName.returnArcSDName() + pSDName.text,
			target <-  placeSD,
			source <- additionalTransition
		)
	
}

rule SelectionConvergence2Place {
	from
		SC: SML!SelectionConvergence
	to
		placeSC: PN!Place (
			name <- pSCName,
			id <- SC.name.returnToLowerCase()
			
		),
		pSCName: PN!Name (
			text <- SC.name
		),
		
				
		additionalTransition : PN!Transition(
			
			id <- thisModule.returnTranSCName() + pSCName.text,

			out <- SC.outgoingEdges
		),

		additionalArc : PN!Arc(

			id <- thisModule.returnArcScName() + pSCName.text,
			target <- additionalTransition ,
			source <- placeSC
		)
}

rule Transition2Transition {
	from
		SMLTransition: SML!Transition
	to
		PetriNetTransition: PN!Transition (
			name <- pTransitionName,
			id <- SMLTransition.name.returnToLowerCase()
		),
		pTransitionName: PN!Name (
			text <- SMLTransition.name
		)
}
