-- @path SML=/at.ac.tuwien.big.statesml.transformations/metamodels/statesml.ecore
-- @nsURI PN=http://org.pnml.tools/epnk/pnmlcoremodel

module SML2PN;
create OUT : PN from IN : SML;

helper def : SD_TransitionName : String = 'AddTran4SD';
helper def : SD_ArcName : String = 'AddArc4SD';
helper def : SC_TransitionName : String = 'AddTran4SC';
helper def : SC_ArcName : String = 'AddArc4SC';

--helper context String def : returnName() :  

rule StateSys2PN {
	from
		i1 : SML!StateSystem
	to 
		o0 : PN!PetriNetDoc(
			net <- o1
		),
		o1 : PN!PetriNet(
			id <- 'PN1' ,
			name <- o2,
			page <- pPage
						
		),
		o2 : PN!Name(
			text <- i1.name	
		),
		
		pPage : PN!Page(
			 id <- 'P1',
			 name <- pPageName,
			 
			 object <- i1.nodes
						
		     
		),
		
		pPageName : PN!Name(
			text <- 'MainPage'
		)
		
}

rule State2Place{
	
	from state: SML!State
	
	to  place : PN!Place(
		
		name <- pStateName,
		id <- state.name.toLower(),
		
		"in" <- state.incomingEdges,
		out <- state.outgoingEdges
		
		
	),
	pStateName : PN!Name(
			text <- state.name
		)
	
}

rule SelectionDivergence2Place{
	
	from SD : SML!SelectionDivergence
	
	to placeSD : PN!Place(
		
		name <- pSDName,
		id <- SD.name.toLower()		
		
	),
	
	pSDName : PN!Name(
			text <- SD.name
		)
		
}



rule TransitionSD2Transition extends TransitionAbstractClass{
	
	from SMLTransition : SML!Transition
	
	to  PetriNetTransition : PN!Transition(
		
		id <- SMLTransition.name
	)
	

}

rule SelectionConvergence2Place{
	
	from SC : SML!SelectionConvergence
	
	to placeSC : PN!Place(
		
		name <- pSCName,
		id <- SC.name.toLower()
	
	),
	
	pSCName : PN!Name(
			text <- SC.name
		)
	
}


abstract rule TransitionAbstractClass {
	
	from SMLTransition : SML!Transition
	
	to PetriNetTransition : PN!Transition
	
}


rule Transition2Transition extends TransitionAbstractClass{
	
	from SMLTransition : SML!Transition
	
	to PetriNetTransition : PN!Transition(
		
		name <- pTransitionName,
		id <- SMLTransition.name.toLower(),
		
		"in" <- SMLTransition.incomingEdges,
		out <- SMLTransition.outgoingEdges

	),
	
	pTransitionName : PN!Name(
		
		text <- SMLTransition.name
		
	)

}

rule Edge2Arc {
	
	from edge : SML!Edge
	
	to arc : PN!Arc(
		
	source <- edge.source,
	target <- edge.target
	)
	

}


