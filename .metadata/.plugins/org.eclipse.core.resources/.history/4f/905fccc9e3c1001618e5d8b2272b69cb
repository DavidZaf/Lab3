-- @path SML=/at.ac.tuwien.big.statesml.transformations/metamodels/statesml.ecore
-- @nsURI PN=http://org.pnml.tools/epnk/pnmlcoremodel


module SML2PN;
create OUT: PN from IN: SML;

helper def: SD_TransitionName: String =
	'AddTran4SD_';

helper def: SD_ArcName: String =
	'AddArc4SD_';

helper def: SC_TransitionName: String =
	'AddTran4SC_';

helper def: SC_ArcName: String =
	'AddArc4SC_';


helper context String def : returnTranSDName() : String =  thisModule.SD_TransitionName;
	
helper context String def : returnTranSCName() : String =  thisModule.SC_TransitionName;	

helper context String def : returnArcSDName() : String =  thisModule.SD_ArcName;

helper context String def : returnArcScName() : String =  thisModule.SC_ArcName;
	
rule StateSys2PN {
	from
		i1: SML!StateSystem
	to
		o0: PN!PetriNetDoc (
			net <- o1
		),
		o1: PN!PetriNet (
			id <- 'PN1',
			name <- o2,
			page <- pPage
		),
		o2: PN!Name (
			text <- i1.name
		),
		pPage: PN!Page (
			id <- 'P1',
			name <- pPageName,
			object <- i1.nodes,
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionDivergence))->collect(x | thisModule.resolveTemp(x,'additionalArc')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionDivergence))->collect(x | thisModule.resolveTemp(x,'additionalTransition')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionConvergence))->collect(x | thisModule.resolveTemp(x,'additionalArc')),
			object <- i1.nodes->select(s | s.oclIsTypeOf(SML!SelectionConvergence))->collect(x | thisModule.resolveTemp(x,'additionalTransition')),
			object <- i1.edges
		),
		pPageName: PN!Name (
			text <- 'MainPage'
		)
}


abstract rule Node2Node{
	
	from SMLNode : SML!Node
	
	to pNode : PN!Node(
	
	--	name <- pNodeName,
	--	id <- SMLNode.name.toLower()
	)

--	pNodeName: PN!Name(
		
--		text <- SMLNode.name
--	)

}



rule State2Place extends Node2Node{
	from
		SMLNode: SML!State    -- SMLNode must be the same name for every extended class as the source and target pattern in the abstract class
	to
		pNode: PN!Place (
			name <- pStateName,
			id <- SMLNode.name.toLower()
		),
		pStateName: PN!Name (
			text <- SMLNode.name
		)
}


rule SelectionDivergence2Place extends Node2Node{
	from
		SMLNode: SML!SelectionDivergence
	to
		pNode: PN!Place (
			name <- pSDName,
			id <- SMLNode.name.toLower(),
			
			--"in" <- additionalArc
			
		),
		pSDName: PN!Name (
			text <- SMLNode.name
		),
		
		additionalTransition : PN!Transition(
			
			id <- thisModule.SD_TransitionName + pSDName.text,
			"in" <- SMLNode.incomingEdges
		),

		additionalArc : PN!Arc(

			id <- thisModule.SD_ArcName + pSDName.text,
			target <-  pNode,
			source <- additionalTransition
		)
	
}

rule SelectionConvergence2Place extends Node2Node{
	from
		SMLNode: SML!SelectionConvergence
	to
		pNode: PN!Place (
			name <- pSCName,
			id <- SMLNode.name.toLower()
			
		),
		pSCName: PN!Name (
			text <- SMLNode.name
		),
		
				
		additionalTransition : PN!Transition(
			
			id <- thisModule.SC_TransitionName + pSCName.text,

			out <- SMLNode.outgoingEdges
		),

		additionalArc : PN!Arc(

			id <- thisModule.SC_ArcName + pSCName.text,
			target <- additionalTransition ,
			source <- pNode
		)
}

rule Transition2Transition extends Node2Node{
	from
		SMLNode: SML!Transition
	to
		pNode: PN!Transition (
			name <- pTransitionName,
			id <- SMLNode.name.toLower()
		),
		pTransitionName: PN!Name (
			text <- SMLNode.name
		)
}


rule Edge2Arc {
	from
		edge: SML!Edge
	to
		arc: PN!Arc (
			id <- edge.name,
			source <- if (not edge.source.oclIsTypeOf(SML!SelectionConvergence)) 
						then edge.source else OclUndefined
						endif,
			target <- if (not edge.source.oclIsTypeOf(SML!SelectionDivergence))
						then
								edge.target else OclUndefined   --OClUndefined is similar to NULLs
								endif
		),
		pArcName: PN!Name (
			text <- edge.name
		)
}
